{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "datafactory-curso-pri"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accountKey' de 'AzureDataLakeStorage1'"
		},
		"databricks_datafactory_link_accessToken": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accessToken' de 'databricks_datafactory_link'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakepriscylla.dfs.core.windows.net/"
		},
		"databricks_datafactory_link_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0821-144459-bk0j0ouv"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/databricks_datafactory_link')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4175599939671113.13.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('databricks_datafactory_link_accessToken')]"
					},
					"existingClusterId": "[parameters('databricks_datafactory_link_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_File_Imoveis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esse dataset vai servir para o Get Metadata dentro do ForEach (quando olhamos cada arquivo individualmente).",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Folder_Imoveis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Esse dataset vai servir para o Get Metadata que lista os childItems da pasta",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake-ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GM",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Folder_Imoveis",
								"type": "DatasetReference",
								"parameters": {
									"container": "@pipeline().parameters.p_container",
									"folderPath": "@pipeline().parameters.p_folder"
								}
							},
							"fieldList": [
								"childItems",
								"lastModified",
								"itemName",
								"itemType",
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@coalesce(activity('GM').output.childItems, json('[]'))",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(\n  equals(item().type, 'File'),\n  or(\n    equals(pipeline().parameters.p_mask, ''),\n    endsWith(tolower(item().name), tolower(pipeline().parameters.p_mask))\n  )\n)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@concat('Pipeline falhou. RunId=', pipeline().RunId)",
								"type": "Expression"
							},
							"errorCode": "GENERIC_PIPELINE_FAILURE"
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(coalesce(activity('Filter1').output.Value, json('[]'))))\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail2",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@concat('Nenhum arquivo encontrado em ',         pipeline().parameters.p_container,'/',pipeline().parameters.p_folder,         '. RunId=', pipeline().RunId)",
											"type": "Expression"
										},
										"errorCode": "NO_FILES_FOUND"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NB_SaveMetadata",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/save_metadata",
										"baseParameters": {
											"files_metadata_json": {
												"value": "@string(variables('filesMetadata'))",
												"type": "Expression"
											},
											"container": {
												"value": "@pipeline().parameters.p_container",
												"type": "Expression"
											},
											"folder": {
												"value": "@pipeline().parameters.p_folder",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "databricks_datafactory_link",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ingestao-camada-bronze",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "NB_SaveMetadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/inbound_to_bronze"
									},
									"linkedServiceName": {
										"referenceName": "databricks_datafactory_link",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ingestao-camada-silver",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "ingestao-camada-bronze",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/bronze_to_silver"
									},
									"linkedServiceName": {
										"referenceName": "databricks_datafactory_link",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@coalesce(activity('Filter1').output.Value, json('[]'))\n\n",
								"type": "Expression"
							},
							"batchCount": 8,
							"activities": [
								{
									"name": "GM_File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_File_Imoveis",
											"type": "DatasetReference",
											"parameters": {
												"container": "@pipeline().parameters.p_container",
												"folderPath": "@pipeline().parameters.p_folder",
												"filename": "@item().name"
											}
										},
										"fieldList": [
											"size",
											"lastModified",
											"contentMD5",
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GM_File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "rowJson",
										"value": [
											"@concat('{\"fileName\":\"'",
											" item().name, '\"}')\n"
										]
									}
								},
								{
									"name": "Acrescentar variavel",
									"type": "AppendVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "filesMetadata",
										"value": {
											"value": "@variables('rowJson')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_container": {
						"type": "string",
						"defaultValue": "imoveis"
					},
					"p_folder": {
						"type": "string",
						"defaultValue": "bronze/dados_brutos_imoveis"
					},
					"p_mask": {
						"type": "string",
						"defaultValue": ".parquet"
					},
					"p_modifiedStart": {
						"type": "string",
						"defaultValue": "2025-09-01T00:00:00Z"
					},
					"p_modifiedEnd": {
						"type": "string",
						"defaultValue": "2025-09-12T23:59:59Z"
					}
				},
				"variables": {
					"filesMetadata": {
						"type": "Array"
					},
					"rowJson": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Folder_Imoveis')]",
				"[concat(variables('factoryId'), '/linkedServices/databricks_datafactory_link')]",
				"[concat(variables('factoryId'), '/datasets/DS_File_Imoveis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "datalake-ingestion",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2025-09-12T11:37:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/datalake-ingestion')]"
			]
		}
	]
}