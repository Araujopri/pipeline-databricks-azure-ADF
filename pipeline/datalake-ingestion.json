{
	"name": "datalake-ingestion",
	"properties": {
		"activities": [
			{
				"name": "GM",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_Folder_Imoveis",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@pipeline().parameters.p_src_container",
								"type": "Expression"
							},
							"folderPath": {
								"value": "@pipeline().parameters.p_src_folder",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems",
						"lastModified",
						"itemName",
						"itemType",
						"exists"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "Filter1",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GM",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@coalesce(activity('GM').output.childItems, json('[]'))",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(\n  equals(item().type,'File'),\n  or(\n    empty(string(coalesce(pipeline().parameters.p_mask,''))),\n    endsWith(\n      tolower(trim(string(coalesce(item().name,'')))),\n      tolower(trim(string(coalesce(pipeline().parameters.p_mask,''))))\n    )\n  )\n)\n\n\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Fail1",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Filter1",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "If Condition1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat('Pipeline falhou. RunId=', pipeline().RunId)",
						"type": "Expression"
					},
					"errorCode": "GENERIC_PIPELINE_FAILURE"
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(length(coalesce(activity('Filter1').output.Value, json('[]'))), 0)\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Wait1",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 1
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "NB_SaveMetadata",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/save_metadata",
								"baseParameters": {
									"files_metadata_json": {
										"value": "@string(variables('filesMetadata'))",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.p_src_container",
										"type": "Expression"
									},
									"folder": {
										"value": "@pipeline().parameters.p_src_folder",
										"type": "Expression"
									},
									"account": "datalakepriscylIa"
								}
							},
							"linkedServiceName": {
								"referenceName": "databricks_datafactory_link",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "ingestao-camada-bronze",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "NB_SaveMetadata",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/inbound_to_bronze"
							},
							"linkedServiceName": {
								"referenceName": "databricks_datafactory_link",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "ingestao-camada-silver",
							"type": "DatabricksNotebook",
							"dependsOn": [
								{
									"activity": "ingestao-camada-bronze",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/Users/prisilara8@gmail.com/pipeline-databricks-azure-ADF/notebooks/bronze_to_silver"
							},
							"linkedServiceName": {
								"referenceName": "databricks_datafactory_link",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@coalesce(activity('Filter1').output.Value, json('[]'))\n\n",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "GM_File",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DS_File_Imoveis",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.p_src_container",
											"type": "Expression"
										},
										"folderPath": {
											"value": "@pipeline().parameters.p_src_folder",
											"type": "Expression"
										},
										"filename": "@item().name"
									}
								},
								"fieldList": [
									"size",
									"lastModified",
									"contentMD5"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "Set variable1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GM_File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "rowJson",
								"value": {
									"value": "@concat(\n  '{',\n  '\"path\":\"', pipeline().parameters.p_src_folder, '/', item().name, '\",',\n  '\"name\":\"', item().name, '\",',\n  '\"sizeBytes\":', string(coalesce(activity('GM_File').output.size, 0)), ',',\n  '\"md5\":\"', coalesce(activity('GM_File').output.contentMD5, ''), '\",',\n  '\"columnCount\":0,',\n  '\"lastModifiedUtc\":\"', string(coalesce(activity('GM_File').output.lastModified, '')), '\"',\n  '}'\n)\n\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Acrescentar variavel",
							"type": "AppendVariable",
							"dependsOn": [
								{
									"activity": "Set variable1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "filesMetadata",
								"value": {
									"value": "@variables('rowJson')",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"p_container": {
				"type": "string",
				"defaultValue": "imoveis"
			},
			"p_folder": {
				"type": "string",
				"defaultValue": "bronze/dados_brutos_imoveis"
			},
			"p_mask": {
				"type": "string",
				"defaultValue": ".json"
			},
			"p_modifiedStart": {
				"type": "string",
				"defaultValue": "2025-09-01T00:00:00Z"
			},
			"p_modifiedEnd": {
				"type": "string",
				"defaultValue": "2025-09-12T23:59:59Z"
			},
			"p_src_container": {
				"type": "string",
				"defaultValue": "imoveis"
			},
			"p_src_folder": {
				"type": "string",
				"defaultValue": "inbound"
			}
		},
		"variables": {
			"filesMetadata": {
				"type": "Array"
			},
			"rowJson": {
				"type": "String"
			}
		},
		"annotations": []
	}
}